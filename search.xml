<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 学习笔记</title>
      <link href="/2020/03/12/Git-Note/"/>
      <url>/2020/03/12/Git-Note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一-git-创建本地版本库小结"><a href="#一-git-创建本地版本库小结" class="headerlink" title="一.git 创建本地版本库小结"></a>一.git 创建本地版本库小结</h4><p>初始化一个Git仓库,使用<code>git init</code>命令。<br>添加文件到Git仓库,分两步：<br>使用命令<code>git add &lt;file&gt;</code>,注意,可反复多次使用,添加多个文件；<br>使用命令<code>git commit -m &lt;message&gt;</code> 完成.    </p><hr><h4 id="二-要随时掌握工作区的状态"><a href="#二-要随时掌握工作区的状态" class="headerlink" title="二.要随时掌握工作区的状态"></a>二.要随时掌握工作区的状态</h4><p>1.使用<code>git status</code>命令。</p><p>2.如果<code>git status</code>告诉你有文件被修改过,用git diff可以查看修改内容。</p><hr><h4 id="三-版本回退"><a href="#三-版本回退" class="headerlink" title="三.版本回退"></a>三.版本回退</h4><p>1.HEAD指向的版本就是当前版本,因此,Git允许我们在版本的历史之间穿梭,<br>使用命令<code>git reset --hard commit_id</code>。</p><p>2.穿梭前,用<code>git log</code>可以查看提交历史,以便确定要回退到哪个版本。</p><p>3.要重返未来,用<code>git reflog</code>查看命令历史,以便确定要回到未来的哪个版本。</p><hr><h4 id="四-工作区和暂存区"><a href="#四-工作区和暂存区" class="headerlink" title="四.工作区和暂存区"></a>四.工作区和暂存区</h4><p>1.就是你在电脑里能看到的目录,比如我的<code>AengusChen.github.io</code>文件夹就是一个工作区\</p><p>2.工作区有一个隐藏目录.git,这个不算工作区,而是Git的版本库,Git的版本库里存了很多东西,其中最重要的就是称为stage（或者叫index）的暂存区,还有Git为我们自动创建的第一个分支<code>master</code>,以及指向master的一个指针叫HEAD。</p><p>3.git管理的是修改,也就是说每次修改需要git add <file> 放入到暂存区,然后<code>git commit</code>才能算最终的修改。</file></p><p><a href="https://i.loli.net/2020/03/11/gZGwzKQbujBacJM.jpg" data-fancybox="group" data-caption="0.jpg" class="fancybox"><img alt="0.jpg" title="0.jpg" data-src="https://i.loli.net/2020/03/11/gZGwzKQbujBacJM.jpg" class="lazyload"></a></p><hr><h4 id="五-撤销修改场景"><a href="#五-撤销修改场景" class="headerlink" title="五.撤销修改场景"></a>五.撤销修改场景</h4><p>场景1：当你改乱了工作区某个文件的内容,想直接丢弃工作区的修改时,用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容,还添加到了暂存区时,想丢弃修改,分两步,第一步用命令<code>git reset HEAD &lt;file&gt;</code>,就回到了场景1,第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时,想要撤销本次提交,参考版本回退一节,不过前提是没有推送到远程库。</p><hr><h4 id="六-删除情景"><a href="#六-删除情景" class="headerlink" title="六.删除情景"></a>六.删除情景</h4><p>1.在文件管理器中删除文件,只删除了工作区的文件,暂存区的文件并未更新,<br>会导致工作区与暂存区的文件版本不一致,这个时候可以使用<code>git rm</code> 删除暂存区的文件,也可以使用 git reflog查看命令历史操作日志,然后用<code>git reset --hard +log</code>中的ID进行回滚。</p><p>2.直接使用 <code>git rm &lt;文件名&gt;</code> 同时删除工作区与暂存区的文件。</p><p>3.以上两种操作都是可以回滚的,除非是 git push -u origin master 提交至远程仓库,只要是在暂存区的文件都可以通过日志找到ID进行回滚。</p><hr><h4 id="七-添加github远程库与本地git工作区建立连接"><a href="#七-添加github远程库与本地git工作区建立连接" class="headerlink" title="七.添加github远程库与本地git工作区建立连接"></a>七.添加github远程库与本地git工作区建立连接</h4><p>1.<code>git remote add origin</code> 自己github中仓库的SSH地址\</p><p>2.<code>git push -u origin master</code> 第一次推送本地库的master所有内容至<br>远程库。</p><p>3.<code>git push origin master</code> 只要进行过步骤二的操作,就可以通过这个命令进行推送了。</p><hr><h4 id="八-从远程克隆github库到本地"><a href="#八-从远程克隆github库到本地" class="headerlink" title="八.从远程克隆github库到本地"></a>八.从远程克隆github库到本地</h4><p>1.git clone github仓库的SSH地址 (建议用SSH协议,http协议速度太慢,每次都要输入口令)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> GIT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 技术 </tag>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
